sudo: required
dist: trusty
language: c
services:
  - docker

jobs:
   include:
     - stage: given ver string build image from VERSION build-arg
       env:
        - VERSION=4.6.0
        - DOCKER_TAG=4.6.0
        - URL=http://127.0.0.1:8080/exist/rest/db
       install: skip
       script:
       - docker build --tag existdb/existdb:${VERSION} --build-arg "VERSION=${VERSION}" . &>/dev/null
       - docker-compose up -d  &>/dev/null
       - |
          # CHECK! eXist is starting with health status
          #  ps cmd should show health status as starting
          set -eo pipefail
          docker ps -a | \
          grep 'exist' | \
          grep -oP 'health.\sstarting'
       - |
          # WAIT! until eXist can be reached
          # set -eo pipefail
          N=0
          until curl -Isf http://127.0.0.1:8080/ 2>/dev/null | grep 'Jetty' || [ $N -eq 20 ]
            do sleep $(( N++ ))
          done
       - |
          # CHECK! eXist can be reached via http
          # response header should grep Jetty
          set -eo pipefail
          curl -Is http://127.0.0.1:8080/ | \
          grep 'Jetty'
       - |
          # CHECK! docker logs should show server has started
          set -eo pipefail
          docker logs exist | \
          grep -oP '^.+\KServer has started.+'
       - sleep 30
       - |
          # CHECK! healthcheck should register healthy
          docker ps | \
          grep -o 'healthy'
       - |
          # changing password with client.jar
          # CHECK! the ability to
          #  - invoke client.jar
          #  - change password
          #  - query db with new pass
          # after changing password the is-dba() query call should return true
          set -eo pipefail
          docker exec exist java -jar start.jar client -q -u admin -P '' \
          -x 'sm:passwd("admin", "nimda")' 2>/dev/null
          cat <<EOF | curl -s -H 'Content-Type: text/xml' -u 'admin:nimda' --data-binary @- "$URL" | grep 'true'
          <query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
          <text><![CDATA[
          xquery version '3.1';
          sm:is-dba(xmldb:get-current-user())
          ]]></text>
          </query>
          EOF
       - |
          # obtain running container eXist 'version'
          # # http GET request to rest endpoint url via CURL
          # CHECK! the ability to
          #  - invoke a http client (curl)
          #  - use GET to query the database
          #  the get-version() query,
          #  should match the version of the freshly minted built image
          set -eo pipefail
          curl -s -u 'admin:nimda' "$URL?_query=system:get-version()&_wrap=no" | \
          grep "$VERSION"
       - |
          # posting requests to rest endpoint url via CURL
          # CHECK! the ability to
          #  - invoke a http client (curl)
          #  - to query the database by POSTing a query
          #
          #  the list returned from a repo:list() query,
          #  should grep 'http://'
          set -eo pipefail
          cat <<EOF | curl -s -H 'Content-Type: text/xml' -u 'admin:nimda' --data-binary @- "$URL" | grep 'http://'
          <query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
          <text><![CDATA[
          xquery version '3.1';
          string-join(repo:list(), '&#10;')
          ]]></text>
          </query>
          EOF
       - |
          # manage config files
          # CHECK! the ability to
          # - copy a config file from container to local disk
          # after copying conf.xml the file should exist locally
          set -eo pipefail
          docker cp exist:exist/config/conf.xml ./conf.xml \
          && [[ -e ./conf.xml ]] && ls -l ./conf.xml
       - |
          # persist changed configuration items
          # CHECK! the abilty to
          #  - alter a config item in a config file on local disk,
          #  - copy the altered config file into containers config dir.
          #  - stop and start the container
          #  - view changed item taking effect in startup logs
          #
          # The startup log should show altered shutdown time
          set -eo pipefail
          sed -i.bak 's/wait-before-shutdown="120000"/wait-before-shutdown="60000"/' ./conf.xml
          docker cp ./conf.xml exist:exist/config/conf.xml
          docker-compose down &>/dev/null
          docker-compose up -d &>/dev/null
          N=0
          until curl -Isf http://127.0.0.1:8080/ 2>/dev/null | grep 'Jetty' || [ $N -eq 20 ]
            do sleep $(( N++ ))
          done
          docker logs exist | grep '60,000 ms during shutdown'
       - |
          # log to docker logs
          # CHECK! the abilty to
          # - call log functions
          # - view results in docker logs
          #
          # eXist log queries should turn up in docker logs
          {
          cat <<EOF | curl -s -H 'Content-Type: text/xml' -u 'admin:nimda' --data-binary @- "$URL"
          <query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
          <text><![CDATA[
          xquery version '3.1';
          (
          util:log-system-out('HELLO SYSTEM-OUT!'),
          util:log-system-err('HELLO SYSTEM-ERR!'),
          util:log('INFO', 'HELLO logged INFO!'),
          util:log('WARN', 'HELLO logged WARN' )
          )
          ]]></text>
          </query>
          EOF
          } && docker logs exist | grep HELLO
       - docker-compose down
     - stage: given commit hash build image from BRANCH build-arg
       env: DOCKER_TAG=449e06c
       install: skip
       script:
       - docker build --tag existdb/existdb:${DOCKER_TAG} --build-arg "BRANCH=${DOCKER_TAG}" . &>/dev/null
       - docker-compose up -d  &>/dev/null
       - |
          # CHECK! eXist is starting with health status
          #  ps cmd should show health status as starting
          set -eo pipefail
          docker ps -a | \
          grep 'exist' | \
          grep -oP 'health.\sstarting'
       - |
          # WAIT! until eXist can be reached
          # set -eo pipefail
          N=0
          until curl -Isf http://127.0.0.1:8080/ 2>/dev/null | grep 'Jetty' || [ $N -eq 20 ]
            do sleep $(( N++ ))
          done
       - |
          # CHECK! eXist can be reached via http
          # response header should grep Jetty
          set -eo pipefail
          curl -Is http://127.0.0.1:8080/ | \
          grep 'Jetty'
       - |
          # CHECK! docker logs should show server has started
          set -eo pipefail
          docker logs exist | \
          grep -oP '^.+\KServer has started.+'
       - sleep 30
       - |
          # CHECK! healthcheck should register healthy
          docker ps | \
          grep -o 'healthy'
       - docker-compose down
     - stage: given master branch name build image from BRANCH build-arg
       env: DOCKER_TAG=master
       install: skip
       script:
       - docker build --tag existdb/existdb:${DOCKER_TAG} --build-arg "BRANCH=${DOCKER_TAG}" . &>/dev/null
       - docker-compose up -d  &>/dev/null
       - |
          # CHECK! eXist is starting with health status
          #  ps cmd should show health status as starting
          set -eo pipefail
          docker ps -a | \
          grep 'exist' | \
          grep -oP 'health.\sstarting'
       - |
          # WAIT! until eXist can be reached
          # set -eo pipefail
          N=0
          until curl -Isf http://127.0.0.1:8080/ 2>/dev/null | grep 'Jetty' || [ $N -eq 20 ]
            do sleep $(( N++ ))
          done
       - |
          # CHECK! eXist can be reached via http
          # response header should grep Jetty
          set -eo pipefail
          curl -Is http://127.0.0.1:8080/ | \
          grep 'Jetty'
       - |
          # CHECK! docker logs should show server has started
          set -eo pipefail
          docker logs exist | \
          grep -oP '^.+\KServer has started.+'
       - sleep 30
       - |
          # CHECK! healthcheck should register healthy
          docker ps | \
          grep -o 'healthy'
       - docker-compose down


# TODO maybe
# a # listing files in config dir
#  # CHECK! with the exist containers provided config dir,
#  # a user should be able to list configuration files
#  # that will enable user to alter eXist start up options.
#  set -eo pipefail
#  cat <<EOF | curl -s -H 'Content-Type: text/xml' -u 'admin:nimda' --data-binary @- "$URL"
#  <query xmlns='http://exist.sourceforge.net/NS/exist' start='1' max='99' wrap='no'>
#  <text><![CDATA[
#  xquery version '3.1';
#  let $eXistHome := system:get-exist-home()
#  let $configDir := concat($eXistHome, '/config')
#  let $fileList := file:list( configDir )
#  return
#   $fileList
#  ]]></text>
#  </query>
#  EOF
